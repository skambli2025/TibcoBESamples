/**
 * @description 
 * @author 
 */
rule Rules.GetEmplInfoRule {
	attribute {
		priority = 5;
		forwardChain = true;
	}
	declare {
		Events.GetEmplInfo	getemplinfo;
		
	}
	when {
		getemplinfo.EmplID >=0;
	}
	then {
		System.debugOut("*******************************");
		int emplid = getemplinfo.EmplID;
		Concepts.taxCal conceptVal;
		
		Employee empl = Instance.getByExtIdByUri(String.valueOfInt(emplid), "/Concepts/Employee");
		if (empl != null) {
			System.debugOut(" #### Employee Details for employee ID: " + String.valueOfInt(emplid));
			System.debugOut (" #### Name: " + empl.EmployeeName);
			System.debugOut (" #### Address: " + empl.Address);
			System.debugOut (" #### City: " + empl.City);
			System.debugOut(" #### State:  "+empl.State);
			System.debugOut(" #### Zip Code:  "+empl.Zip);
			
			System.debugOut("empl.EmplID"+empl.EmplID);
			conceptVal = Instance.createInstance("xslt://{{/Concepts/taxCal}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"2.0\"><xsl:param name=\"emplid\"/><xsl:param name=\"empl\"/><xsl:template name=\"Function\" match=\"/\"><createObject><object><empID><xsl:value-of select=\"$emplid\"/></empID><xsl:if test=\"$empl/State\"><empState><xsl:value-of select=\"$empl/State\"/></empState></xsl:if><empSalary><xsl:value-of select=\"\'\'\"/></empSalary><empTaxPercentage><xsl:value-of select=\"\'\'\"/></empTaxPercentage></object></createObject></xsl:template></xsl:stylesheet>");
			
			System.debugOut("conceptVal Values : "+conceptVal.empID+" "+conceptVal.empState);
			
			String tax = RuleFunctions.CheckTaxSlab(conceptVal);
			System.debugOut(" Tax Percentage : "+tax);
		}
		else{
			System.debugOut(" #### Employee for this ID doesn't exists");
		}
		Events.GetEmplInfoResponse response = Event.createEvent("xslt://{{/Events/GetEmplInfoResponse}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:ns=\"http://tibco.com/qa/xsd/address\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"2.0\" exclude-result-prefixes=\"xsd\"><xsl:output method=\"xml\"/><xsl:param name=\"empl\"/><xsl:template name=\"Function\" match=\"/\"><createEvent><event><xsl:if test=\"$empl/EmplID\"><EmplID><xsl:value-of select=\"$empl/EmplID\"/></EmplID></xsl:if><payload><ns:Address_Response_Element><ns:EmployeeName><xsl:value-of select=\"$empl/EmployeeName\"/></ns:EmployeeName><ns:CompanyName><xsl:value-of select=\"$empl/CompanyName\"/></ns:CompanyName><ns:Address><xsl:value-of select=\"$empl/Address\"/></ns:Address><ns:City><xsl:value-of select=\"$empl/City\"/></ns:City><ns:State><xsl:value-of select=\"$empl/State\"/></ns:State><ns:Zip><xsl:value-of select=\"xsd:int($empl/Zip)\"/></ns:Zip></ns:Address_Response_Element></payload></event></createEvent></xsl:template></xsl:stylesheet>");
		Event.replyEvent (getemplinfo, response);
		Event.consumeEvent(getemplinfo);
	}
}